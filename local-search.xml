<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>蜂窝网络标准和类型变迁</title>
    <link href="/github.io/2025/07/15/4.3%20%E8%9C%82%E7%AA%9D%E7%BD%91%E7%BB%9C%E6%A0%87%E5%87%86%E5%92%8C%E7%B1%BB%E5%9E%8B%E5%8F%98%E8%BF%81/"/>
    <url>/github.io/2025/07/15/4.3%20%E8%9C%82%E7%AA%9D%E7%BD%91%E7%BB%9C%E6%A0%87%E5%87%86%E5%92%8C%E7%B1%BB%E5%9E%8B%E5%8F%98%E8%BF%81/</url>
    
    <content type="html"><![CDATA[<p>严格来说，是海因里希·赫兹揭开了无线历史的序幕。1886 年，他首次成功产生并证实了无线电波的存在。1912 年，沉没的泰坦尼克号使用古列尔莫·马可尼发明的第一个无线电报系统发出了 SOS 紧急求救信号。人们掌握基础物理原理后，移动通信的标准化进程才能开始。而蜂窝手机技术的历史始于1947年12月11日，贝尔实验室工程师道格拉斯·H·林（Douglas H. Ring）撰写了一份内部备忘录，建议AT&amp;T开发蜂窝电话系统。</p><h2 id="1G"><a href="#1G" class="headerlink" title="1G"></a>1G</h2><p>第一代移动通信系统是模拟蜂窝系统，它采用频分多址(FrequencyDivision Multiple Access,FDMA)技术。第一代移动通信系统打破了传统的大区制无线电广播和无线电台的技术理念，基于蜂窝结构的频率复用组网方案，提升了频谱利用的效率，基本保证了移动场景下话音业务的连续性，为移动通信的快速普及和应用奠定了基础。典型的第一代通信系统有北美的高级移动电话系统(AdvancedMobile Phone System,AMPS)、英国的全接入通信系统(TotalAccess Communication System,TACS)等。第一代通信系统在20世纪80年代初实现了蜂窝网的商业化，并于90年代末退出历史舞台，是移动通信发展史上重要的里程碑。模拟蜂窝系统的缺点是容量小、业务种类单一(话音业务)、传输质量不高、保密性差、制式不统一，且设备难以小型化。</p><h2 id="2G"><a href="#2G" class="headerlink" title="2G"></a>2G</h2><p>第二代移动通信系统是窄带数字蜂窝系统，它采用时分多址(TimeDivision Multiple Access,TDMA)或码分多址(Code Division Multiple Access，CDMA)技术。典型的系统有欧洲的GSM(采用TDMA技术，20世纪90年代初期商用)系统、北美的IS-95(采用CDMA技术，20世纪90年代中期商用)系统等。第二代移动通信系统在容量和性能上都比第一代系统有了很大的提高，不仅可以提供话音业务，还可以提供低速数据业务。第二代移动通信系统使移动通信得到了广泛的应用和普及，取得了商业上的巨大成功。第二代移动通信系统的技术和性能还在不断地演进和提高，形成了全球移动通信系统( Global System for Mobile Communications，GSM)的演进版本通用分组无线服务(General Packet Radio Service,GPRS)和增强型数据速率GSM演进(EDGE)，以及CDMA的演进版本CDMA1x，以提供更高速率的电路和分组数据业务。从1990年商用到2014年，全球范围内通过第二代移动通信系统接入的用户数超过40亿户。</p><h2 id="3G"><a href="#3G" class="headerlink" title="3G"></a>3G</h2><p>第三代移动通信系统开启了由以话音业务为主向以数据业务为主的移动通信发展时代的转变。第三代移动通信标准的讨论始于20世纪90年代，国际电信联盟(ITU)在2000年5月召开的全球无线电大会(WRC-2000)上正式批准了第三代移动通信系统的无线接口技术规范建议(IMT-RSCP)，此规范建议了5种技术标准。其中，有两种是TDMA技术:SC-TDMA(美国的UMC-136)和MC-TDMA(欧洲的EP-DECT)；另外3种是CDMA技术:MC-CDMA(即cdma2000),DS-CDMA(即WCDMA)和CDMATDD(包括TD-SCDMA和UTRA TDD)。</p><h2 id="4G"><a href="#4G" class="headerlink" title="4G"></a>4G</h2><p>3GPP于2005年3月正式启动了空口技术的长期演进(Long Term Evolution，LTE)项目,并于2008年12月发布了LTE第一个商用版本R8系列规范，截至2014年年底,共发布了R9、R10、R11和R124个增强型规范,并将持续进行后续版本演进。虽然业界通常将LTE称为第四代移动通信标准，但严格意义上，LTE的R10以后的版本(也称为LTE-Advanced )才是真正满足ITU对第四代移动通信标准性能指标要求的规范。LTE 系统的目标是以OFDM和MIMO为主要技术基础，开发出满足更低传输时延、提供更高用户传输速率、增加容量和覆盖、减少运营费用、优化网络架构、采用更大载波带宽，并优化分组数据域传输的移动通信标准。LTE&#x2F;LTE-Advanced标准分为FDD和 TDD两种模式，其中TDD模式作为TD-SCDMA系统的后续演进技术与标准，其核心技术由中国厂商所主导，也被称为TD-LTE&#x2F;LTE-Advanced。</p><h2 id="5G"><a href="#5G" class="headerlink" title="5G"></a>5G</h2><p>5G（5th-Generation），即第五代移动电话行动通信标准，也称第五代移动通信技术，是4G之后的延伸。5G具有高速率、宽带宽、高可靠、低时延等特征。随着无线移动通信系统带宽和能力的增加，面向个人和行业的移动应用快速发展，移动通信相关产业生态将逐渐发生变化，5G不仅仅是更高速率、更大带宽、更强能力的空中接口技术，而且是面向用户体验和业务应用的智能网络。与前几代产品相比，5G旨在提供更高的数据传输速率、更低的延迟和更高的可靠性，从而实现新的用例，并改变广泛的行业。5G 网络可以支持更多的设备，还可以处理更多的数据密集型应用，例如虚拟现实和增强现实、自动驾驶汽车和 IoT（物联网）。</p><h2 id="6G"><a href="#6G" class="headerlink" title="6G"></a>6G</h2><p>在现阶段，国际电信联盟无线通信部门（ITU-R）的主要目标是就IMT-2030（6G）的愿景达成全球共识，包括识别潜在用户应用趋势和新兴技术趋势、定义增强型&#x2F;新型应用场景和相关能力、理解频谱方面的新需求等。ITU-R于2022年6月商定了6G的总体时间表，主要分为三个阶段1：</p><p>阶段1——2023年6月，在世界无线电通信大会（WRC-23）召开之前，完成愿景定义；<br>阶段2——2026年确定需求和评估方法；<br>阶段3——2030年输出规范。</p>]]></content>
    
    
    
    <tags>
      
      <tag>无线通讯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RISC-V处理器的脉络</title>
    <link href="/github.io/2025/06/10/1.5%20RISC-V%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E8%84%89%E7%BB%9C/"/>
    <url>/github.io/2025/06/10/1.5%20RISC-V%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E8%84%89%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<p>RISC-V，中文名称是第五代精简指令集(Reduced Instruction Set Computing)，是加州大学伯克利分校（University of California at Berkeley）设计并发布的基于精简指令集原则的一种开源指令集架构，其目标是成为指令集架构领域的Linux，应用覆盖IoT设备、桌面计算机、高性能计算机等众多领域。</p><p>基于RISC-V架构的开源处理器有很多，既有标量处理器Rocket，也有超标量处理器BOOM，还有面向嵌入式领域的Z-scale、PicoRV32等。</p><h2 id="1-标量处理器——Rocket"><a href="#1-标量处理器——Rocket" class="headerlink" title="1. 标量处理器——Rocket"></a>1. 标量处理器——Rocket</h2><p>  Rocket是UCB设计的一款64位、5级流水线、单发射顺序执行处理器，主要特点有：支持MMU，支持分页虚拟内存，所以可以移植Linux操作系统；具有兼容IEEE 754-2008标准的FPU；具有分支预测功能；采用Chisel编写的。</p><h2 id="2-超标量乱序执行处理器——BOOM"><a href="#2-超标量乱序执行处理器——BOOM" class="headerlink" title="2. 超标量乱序执行处理器——BOOM"></a>2. 超标量乱序执行处理器——BOOM</h2><p>  BOOM（Berkeley Out-of-Order Machine）是UCB设计的一款64位超标量、乱序执行处理器，支持RV64G，利用Chisel的优势，只使用了9000行代码，流水线可以划分为六个阶段：取指、译码&#x2F;重命名&#x2F;指令分配、发射&#x2F;读寄存器、执行、访存、回写。 借助于Chisel，BOOM是可参数化配置的超标量处理器。</p><h2 id="3-处理器家族——SHAKTI"><a href="#3-处理器家族——SHAKTI" class="headerlink" title="3. 处理器家族——SHAKTI"></a>3. 处理器家族——SHAKTI</h2><p>  SHAKTI是印度理工学院的一个计划，目标是设计一系列适合不同应用环境的、基于RISC-V的开源处理器，以及一些IP核，以便搭建SoC。这些处理器是E-Class、C-Class、I-Class、M-Class、S-Class、H-Class、T-Class、N-Class，目前已经开源的是前三个，使用Bluespec System Verilog编写。</p><p>E-Class：32位标量处理器，3级流水线，支持RISC-V的C（Compress）扩展，目标是超低功耗处理器。</p><p>C-Class：32位或者64位标量处理器，3-8级流水线，支持MMU、具有容错功能、支持RISC-V的C扩展，目标也是超低功耗处理器。</p><p> I-Class：64位、1-8核，乱序执行处理器，共享L2 Cache、支持双线程、SIMD&#x2F;VPU，目标是通用处理器。</p><p> M-Class：I-Class的增强版，增加了指令发射大小、支持四线程、最高支持16核，目标是通用处理器、低端服务器和移动应用。</p><p> S-Class：64位、超标量多线程处理器，支持L3 Cache、RapidIO、HMC（Hybrid Memory Cube）、向量处理单元，还有协处理器用于数据库访问、加密算法、机器学习，最高支持64核，目标是通用处理器、服务器。</p><p> H-Class：64位、32-128核、支持多线程、顺序或者乱序执行处理器，具有向量处理单元，目标是高性能计算。</p><p> T-Class：64或者128位处理器，其中通过为存储器引入Tag，从而增强其安全性。</p><p> N-Class：目标是通过自定义的扩展进行网络数据处理</p><h2 id="4-嵌入式应用处理器——ORCA"><a href="#4-嵌入式应用处理器——ORCA" class="headerlink" title="4. 嵌入式应用处理器——ORCA"></a>4. 嵌入式应用处理器——ORCA</h2><p>  PicoRV32是由VectorBlox公司设计的一款32位标量处理器，目标是应用于嵌入式领域，采用VHDL编写，实现了RV32IM，也可以移除其中的M扩展，也就是移除乘法除法扩展，从而减少芯片占用资源，甚至可以移除与定时器有关的指令，从而仅仅实现RV32E。</p><h2 id="5-其他开源处理器"><a href="#5-其他开源处理器" class="headerlink" title="5. 其他开源处理器"></a>5. 其他开源处理器</h2><h4 id="（1）RI5CY"><a href="#（1）RI5CY" class="headerlink" title="（1）RI5CY"></a>（1）RI5CY</h4><p>  RI5CY是由苏黎世联邦理工大学和波罗尼亚大学联合设计的一款小巧的4级流水线开源处理器，实现了RV32IC，以及RV32M中乘法指令mul，其目标是作为并行超低功耗处理器项目PULP（Parallel Ultra Low Power）的处理器核，所以RI5CY在RISC-V的基础上增加了许多扩展，包括硬件循环、乘累加、高级算术指令等。采用SystemVerilog编写。</p><h4 id="（2）RIDECORE"><a href="#（2）RIDECORE" class="headerlink" title="（2）RIDECORE"></a>（2）RIDECORE</h4><p>  RIDECORE (RIsc-v Dynamic Execution CORE) 是由东京工业大学设计发布的一款超标量乱序执行处理器，实现了RV32IM，6级流水线，分别是取指、译码、指令分配、发射、执行、提交，可以同时取两条指令、对两条指令译码、提交两条指令。采用的是Gshare分支预测机制。</p><h4 id="（3）Hwacha"><a href="#（3）Hwacha" class="headerlink" title="（3）Hwacha"></a>（3）Hwacha</h4><p>  Hwacha是由UCB开发的一款向量处理器，UCB将Hwacha作为RISC-V的一个非标准扩展Xhwacha，已经以28nm和45nm的工艺流片多次，主频在1.5GHz以上，目前还在研发中，正在修改OpenCL的编译器，以适合Hwacha，UCB计划以开源的形式发布其代码。</p><h4 id="（4）f32c"><a href="#（4）f32c" class="headerlink" title="（4）f32c"></a>（4）f32c</h4><p>f32c是由萨格勒布大学设计发布的32位、5级流水线、标量处理器，原本实现的是MIPS指令集，后来添加实现了RISC-V指令集，处理器包括分支预测、直接映射缓存，同时发布的还有SDRAM控制器、SRAM控制器、视频FrameBuffer、SPI控制器、UART、GPIO等IP，使用VHDL编写代码。</p><h4 id="（5）Z-scale-V-scale"><a href="#（5）Z-scale-V-scale" class="headerlink" title="（5）Z-scale&#x2F;V-scale"></a>（5）Z-scale&#x2F;V-scale</h4><p>  Z-scale是UCB发布的针对嵌入式环境的32位、3级流水线、单发射标量处理器，实现了RV32IM，指令总线和数据总线都是AHB-Lite。Z-scale采用是Chisel编写代码，利用Rocket中的代码，仅增加了604行代码就实现了Z-scale。V-scale是Z-scale对应的Verilog版本。</p><h4 id="（6）sodor"><a href="#（6）sodor" class="headerlink" title="（6）sodor"></a>（6）sodor</h4><p>  sodor是UCB发布的针对教学的32位开源处理器系列，采用Chisel编码实现，可以很容易的得到对应的C++模拟器。sodor系列有五种处理器，分别是单周期处理器、2级流水线处理器、3级流水线处理器、5级流水线处理器、可执行微码的处理器。</p><h4 id="（7）PicoRV32"><a href="#（7）PicoRV32" class="headerlink" title="（7）PicoRV32"></a>（7）PicoRV32</h4><p>  PicoRV32是由RISC-V开发者Clifford Wolf设计发布的一款大小经过优化的开源处理器，实现了RV32IMC，并且根据不同环境可配置为实现RV32E、RV32I、RV32IC、RV32IM、RV32IMC。内置一个可选择的中断控制器。其特点是小巧，在linx7系列芯片上占用750-2000个LUT，速度可以达到250-400MHz。PicoRV32采用Verilog编写代码。</p><h4 id="（8）Tom-Thumb"><a href="#（8）Tom-Thumb" class="headerlink" title="（8）Tom Thumb"></a>（8）Tom Thumb</h4><p>  Tom Thumb是由RISC-V开发者maikmerten设计发布的一款32位、6级流水线开源处理器，实现了RV32I，目标是尽量减少FPGA的资源占用，在Cyclone IV系列FPGA上大约占用资源1200 LEs。采用VHDL编写代码。</p><h4 id="（9）FlexPRET"><a href="#（9）FlexPRET" class="headerlink" title="（9）FlexPRET"></a>（9）FlexPRET</h4><p>  FlexPRET是由UCB设计发布的5级流水线、多线程处理器，目标是使用在实时嵌入式应用中，线程数量可配置为1-8。为了提高嵌入式处理器的资源利用率，每个硬件线程被标记为硬实时或者软实时，硬实时线程按照固定的频率被调度，如果当前没有硬实时线程可调度，再调度软实时线程。使用Chisel编写代码。</p><h4 id="（10）YARVI"><a href="#（10）YARVI" class="headerlink" title="（10）YARVI"></a>（10）YARVI</h4><p>  YARVI（Yet Another RISC-V Implementation）是由RISC-V开发者Tommy Thorn设计发布的一款简单的、32位开源处理器，实现了RV32I，使用Verilog作为开发语言。其出发点不在于性能，而是要能够清晰、准确的实现RV32I。</p>]]></content>
    
    
    
    <tags>
      
      <tag>芯片架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝牙标准和类型变迁</title>
    <link href="/github.io/2025/05/25/4.2%20%E8%93%9D%E7%89%99%E6%A0%87%E5%87%86%E5%92%8C%E7%B1%BB%E5%9E%8B%E5%8F%98%E8%BF%81/"/>
    <url>/github.io/2025/05/25/4.2%20%E8%93%9D%E7%89%99%E6%A0%87%E5%87%86%E5%92%8C%E7%B1%BB%E5%9E%8B%E5%8F%98%E8%BF%81/</url>
    
    <content type="html"><![CDATA[<p>“蓝牙”技术起源于1989年。爱立信移动公司Nils Rydbeck博士和Johan Ullman博士想开发无线耳机，取代有线耳机。Jaap Haartsen博士后续参与该项目，仅5年时间就取得突破并提出第一个协议。1999年拉斯维加斯计算机博览会上。他们向世界展示了第一款免提蓝牙耳机，获得了佳奖。</p><h2 id="第一代蓝牙：关于短距离通讯早期的探索"><a href="#第一代蓝牙：关于短距离通讯早期的探索" class="headerlink" title="第一代蓝牙：关于短距离通讯早期的探索"></a>第一代蓝牙：关于短距离通讯早期的探索</h2><h4 id="1999-年：蓝牙-1-0"><a href="#1999-年：蓝牙-1-0" class="headerlink" title="1999 年：蓝牙 1.0"></a>1999 年：蓝牙 1.0</h4><p>早期的蓝牙 1.0 A 和 1.0B 版存在多个问题，产品互不兼容，在两个设备链接的过程中蓝牙硬件的地址会被发送出去，在协议的层面上不能做到匿名，造成泄漏数据的危险。因此，当 1.0 版本推出以后，蓝牙并未立即受到广泛的应用。</p><h4 id="2001-年：蓝牙-1-1"><a href="#2001-年：蓝牙-1-1" class="headerlink" title="2001 年：蓝牙 1.1"></a>2001 年：蓝牙 1.1</h4><p>蓝牙 1.1 版正式列入 IEEE 802.15.1 标准，该标准定义了物理层（PHY）和媒体访问控制（MAC）规范，用于设备间的无线连接，传输率为 0.7Mbps，但因为早期设计容易受到同频率产品干扰，影响通讯质量。</p><h4 id="2003-年：蓝牙-1-2"><a href="#2003-年：蓝牙-1-2" class="headerlink" title="2003 年：蓝牙 1.2"></a>2003 年：蓝牙 1.2</h4><p>蓝牙 1.2 版针对 1.0 版本暴露出的安全性问题，完善了匿名方式，新增屏蔽设备的硬件地址（BD_ADDR）功能，保护用户免受身份嗅探攻击和跟踪，同时向下兼容 1.1 版。此外，还增加了四项新功能：</p><ul><li><p>AFH适应性跳频技术，减少了蓝牙产品与其它无线通讯装置之间所产生的干扰问题；</p></li><li><p>eSCO延伸同步连结导向信道技术，用于提供 QoS 的音频传输，进一步满足高阶语音与音频产品的需求；</p></li><li><p>Faster Connection 快速连接功能，可以缩短重新搜索与再连接的时间，使连接过程更为稳定快速；</p></li><li><p>支持 Stereo 音效的传输要求，但只能以单工方式工作。</p></li></ul><h2 id="第二代蓝牙：发力传输速率的-EDR-时代"><a href="#第二代蓝牙：发力传输速率的-EDR-时代" class="headerlink" title="第二代蓝牙：发力传输速率的 EDR 时代"></a>第二代蓝牙：发力传输速率的 EDR 时代</h2><h4 id="2004-年：蓝牙-2-0"><a href="#2004-年：蓝牙-2-0" class="headerlink" title="2004 年：蓝牙 2.0"></a>2004 年：蓝牙 2.0</h4><p>蓝牙 2.0 是 1.2 版本的改良版，新增的 EDR（Enhanced Data Rate）技术通过提高多任务处理和多种蓝牙设备同时运行的能力，使得蓝牙设备的传输率可达 3Mbps。蓝牙 2.0 支持双工模式，可以一边进行语音通讯，一边传输文档&#x2F;高质素图片。</p><h4 id="2007-年：蓝牙-2-1"><a href="#2007-年：蓝牙-2-1" class="headerlink" title="2007 年：蓝牙 2.1"></a>2007 年：蓝牙 2.1</h4><p>蓝牙 2.1 新增了 Sniff Subrating 省电功能，将设备间相互确认的讯号发送时间间隔从旧版的 0.1 秒延长到 0.5 秒左右，从而让蓝牙芯片的工作负载大幅降低。另外，新增 SSP 简易安全配对功能，改善了蓝牙设备的配对体验，同时提升了使用和安全强度。</p><h2 id="第三代蓝牙：High-Speed，传输速率高达-24Mbps"><a href="#第三代蓝牙：High-Speed，传输速率高达-24Mbps" class="headerlink" title="第三代蓝牙：High Speed，传输速率高达 24Mbps"></a>第三代蓝牙：High Speed，传输速率高达 24Mbps</h2><h4 id="2009-年：蓝牙-3-0"><a href="#2009-年：蓝牙-3-0" class="headerlink" title="2009 年：蓝牙 3.0"></a>2009 年：蓝牙 3.0</h4><p>蓝牙 3.0 新增了可选技术 High Speed，可以使蓝牙调用 802.11 WiFi 用于实现高速数据传输，传输率高达 24Mbps，是蓝牙 2.0 的 8 倍，轻松实现录像机至高清电视、PC 至 PMP、UMPC 至打印机之间的资料传输。蓝牙 3.0 的核心是 AMP（Generic Alternate MAC&#x2F;PHY），这是一种全新的交替射频技术，允许蓝牙协议栈针对任一任务动态地选择正确射频。</p><h2 id="第四代蓝牙：主推「-Low-Energy」低功耗"><a href="#第四代蓝牙：主推「-Low-Energy」低功耗" class="headerlink" title="第四代蓝牙：主推「 Low Energy」低功耗"></a>第四代蓝牙：主推「 Low Energy」低功耗</h2><h4 id="2010-年：蓝牙-4-0"><a href="#2010-年：蓝牙-4-0" class="headerlink" title="2010 年：蓝牙 4.0"></a>2010 年：蓝牙 4.0</h4><p>蓝牙 4.0 是迄今为止第一个蓝牙综合协议规范，将三种规格集成在一起。其中最重要的变化就是 BLE（Bluetooth Low Energy）低功耗功能，提出了低功耗蓝牙、传统蓝牙和高速蓝牙三种模式：「高速蓝牙」主攻数据交换与传输；「传统蓝牙」则以信息沟通、设备连接为重点；「低功耗蓝牙」以不需占用太多带宽的设备连接为主，功耗较老版本降低了 90%。</p><p>蓝牙 4.0 的芯片模式分为 Single mode 与 Dual mode。Single mode 只能与蓝牙 4.0 互相传输无法向下与 3.0&#x2F;2.1&#x2F;2.0 版本兼容；Dual mode 可以向下兼容 3.0&#x2F;2.1&#x2F;2.0 版本。此外，蓝牙 4.0 还把蓝牙的传输距离提升到100米以上（低功耗模式条件下）。</p><h4 id="2013-年：蓝牙-4-1"><a href="#2013-年：蓝牙-4-1" class="headerlink" title="2013 年：蓝牙 4.1"></a>2013 年：蓝牙 4.1</h4><p>蓝牙 4.1 在传输速度和传输范围上变化很小，但在软件方面有着明显的改进。支持与 LTE 无缝协作。允许开发人员和制造商「自定义」蓝牙 4.1 设备的重新连接间隔，为开发人员提供了更高的灵活性和掌控度。支持「云同步」。支持「扩展设备」与「中心设备」角色互换。</p><h4 id="2014-年：蓝牙-4-2"><a href="#2014-年：蓝牙-4-2" class="headerlink" title="2014 年：蓝牙 4.2"></a>2014 年：蓝牙 4.2</h4><p>蓝牙 4.2 改善了传输速率和隐私保护程度，比上代提高了 2.5 倍，蓝牙信号想要连接或者追踪用户设备，必须经过用户许可。用户可以放心使用可穿戴设备而不用担心被跟踪。</p><h2 id="第五代蓝牙：开启「物联网」时代大门"><a href="#第五代蓝牙：开启「物联网」时代大门" class="headerlink" title="第五代蓝牙：开启「物联网」时代大门"></a>第五代蓝牙：开启「物联网」时代大门</h2><h4 id="2016-年：蓝牙-5-0"><a href="#2016-年：蓝牙-5-0" class="headerlink" title="2016 年：蓝牙 5.0"></a>2016 年：蓝牙 5.0</h4><p>蓝牙 5.0 在低功耗模式下具备更快更远的传输能力，传输速率是蓝牙 4.2 的两倍（速度上限为 2Mbps），有效传输距离是蓝牙 4.2 的四倍（理论上可达 300 米），数据包容量是蓝牙 4.2 的八倍。支持室内定位导航功能，结合 WiFi 可以实现精度小于 1 米的室内定位。</p><h4 id="2019年1月：蓝牙5-1"><a href="#2019年1月：蓝牙5-1" class="headerlink" title="2019年1月：蓝牙5.1"></a>2019年1月：蓝牙5.1</h4><p>引入无线电测向(Direction Finding)技术，从而进一步增强蓝牙位置服务(Location Services)。定位精度为分米级。蓝牙5.1使用两种是基于天线陈列(Antenna Array)的测向技术。</p><h4 id="2019年12月：蓝牙5-2"><a href="#2019年12月：蓝牙5-2" class="headerlink" title="2019年12月：蓝牙5.2"></a>2019年12月：蓝牙5.2</h4><p>基于该版本的新一代蓝牙音频技术标准——低功耗音频LE Audio。LE Audio除了提供更为高质量的音质效果，还通过重新定义的ISO通道提供了连接和广播等不同方式的音频传输机制，创造了更可观的场景。</p><h4 id="2021年：蓝牙5-3"><a href="#2021年：蓝牙5-3" class="headerlink" title="2021年：蓝牙5.3"></a>2021年：蓝牙5.3</h4><p>主要提升在传输效率、安全性、稳定性三个方面：解决5.2版本无法传输低速率数据，加密控制增强，周期性广播增强。</p><h4 id="2023年1月，蓝牙5-4"><a href="#2023年1月，蓝牙5-4" class="headerlink" title="2023年1月，蓝牙5.4"></a>2023年1月，蓝牙5.4</h4><p>主要更新了广播数据加密、广播编码选择、带响应的周期性广播、以及LE GATT 安全级别特征。</p><h2 id="蓝牙的未来：迈向6-0时代"><a href="#蓝牙的未来：迈向6-0时代" class="headerlink" title="蓝牙的未来：迈向6.0时代"></a>蓝牙的未来：迈向6.0时代</h2><p>蓝牙6.0将进一步整合AI技术，提升抗干扰能力，并可能支持更高带宽的实时传输，为AR&#x2F;VR、车联网、智能工厂等场景提供更强支持。</p>]]></content>
    
    
    
    <tags>
      
      <tag>无线通讯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arduino开发板的版本类型</title>
    <link href="/github.io/2025/05/14/2.3%20Arduino%E5%BC%80%E5%8F%91%E6%9D%BF%E7%9A%84%E7%89%88%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    <url>/github.io/2025/05/14/2.3%20Arduino%E5%BC%80%E5%8F%91%E6%9D%BF%E7%9A%84%E7%89%88%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Arduino-UNO"><a href="#1-Arduino-UNO" class="headerlink" title="1. Arduino UNO"></a>1. Arduino UNO</h2><p>UNO一共有三个版本，现在常见能买到的是R3版本。R3版本采用的微处理器是ATmega328. 该版本包括14个数字输入输出IO,６个模拟输入IO,16Mhz的晶振，USB接口。相对于其它版本，R3版本的不同之处是：1) 增加I2C总线接口:SDA,SCL；2) 增强的复位线路；3) 使用16U2替代以前的8U2。</p><h2 id="2-Arduino-Due"><a href="#2-Arduino-Due" class="headerlink" title="2. Arduino Due"></a>2. Arduino Due</h2><p>Arduino Due 是 Arduino 家族新的微控制器板，这是首个采用 32 位 ARM 处理器的开发板，Atmel SAM3X8E ARM Cortex-M3 MCU 提升了所有标准的 Arduino 功能，同时增加更多新特性。Arduino Due 提供 54 个数字输入输出管脚，12 个模拟输入，4个 UARTs和两个 DAC 输出，84 MHz 晶振，两个 USB 口，一个电源插口，一个 ICSP 头，一个 JTAG 头和一个 Reset 按钮。I&#x2F;O 管脚最大可提供 3.3v 电源。</p><h2 id="3-Arduino-Leonardo"><a href="#3-Arduino-Leonardo" class="headerlink" title="3. Arduino Leonardo"></a>3. Arduino Leonardo</h2><p>Arduino Leonardo是基于ATmega32u4一个微控制器板。它有20个数字输入&#x2F;输出引脚，一个16 MHz的晶体振荡器，一个Micro USB接口，一个DC接口，一个ICSP接口，一个复位按钮。Leonardo不同于之前所有的arduino控制器，他直接使用了ATmega32u4的USB通信功能，取消了USB转UART芯片。</p><h2 id="4-Arduino-Mega-2560"><a href="#4-Arduino-Mega-2560" class="headerlink" title="4. Arduino Mega 2560"></a>4. Arduino Mega 2560</h2><p>Mega2560的处理器核心是ATmega2560，具有54路数字输入&#x2F;输出口，16路模拟输入，4路UART接口，一个16MHz晶体振荡器，一个USB口，一个电源插座，一个ICSP header和一个复位按钮。Arduino Mega2560也是采用USB接口的核心电路板，它最大的特点就是具有多达54路数字输入输出，特别适合需要大量IO接口的设计。Arduino Mega2560也能兼容为Arduino UNO设计的扩展板，已经发布到第三版。</p><h2 id="5-Arduino-MEGA-ADK"><a href="#5-Arduino-MEGA-ADK" class="headerlink" title="5. Arduino MEGA ADK"></a>5. Arduino MEGA ADK</h2><p>Arduino Mega ADk也是采用USB接口的核心电路板，它与Mega2560最大的不同就是Mega ADK上多了一路USB主控制接口用来与Andrio系统的手机互连。</p><h2 id="6-Arduino-Micro"><a href="#6-Arduino-Micro" class="headerlink" title="6. Arduino Micro"></a>6. Arduino Micro</h2><p>Arduino Micro是一块基于ATmega32u4处理器的微小开发板，从Adafruit上发展而来，它有20个数字输入输出接口（其中7个支持PWM输出，12个模拟输入），一个16MHz晶体振荡器，一个MicroUSB口，一个ICSP，一个复位按钮。</p><h2 id="7-Arduino-Mini"><a href="#7-Arduino-Mini" class="headerlink" title="7.Arduino Mini"></a>7.Arduino Mini</h2><p>Arduino Mini原来的主板是采用ATmega168微型处理器，现在已采用Atmega328处理器，有14个数字输入输出接口，8个模拟输入，16MHz的晶体振荡器，它可以通过USB接口或USB转RS232 TTL线，新的Mini(revision 05)采用ATmega328处理器，板上有一个Reset按键。</p><h2 id="8-Arduino-Nano"><a href="#8-Arduino-Nano" class="headerlink" title="8.Arduino Nano"></a>8.Arduino Nano</h2><p>Arduino Nano是Arduino USB接口的微型版本，最大的不同是没有电源插座以及USB接口是Mini-B型插座。Arduino Nano是尺寸非常小的而且可以直接插在面包板上使用。其处理器核心是ATmega168(Nano2.x)和ATmega328(Nano3.0)，同时具有14路数字输入&#x2F;输出口，8路模拟输入，一个16MHz晶体振荡器，一个mini-B USB口，一个ICSP header和一个复位按钮。</p><h2 id="9-Arduino-Ethernet"><a href="#9-Arduino-Ethernet" class="headerlink" title="9.Arduino Ethernet"></a>9.Arduino Ethernet</h2><p>Arduino Ethernet是Arduino以太网接口版本，其最大不同就是没有片上的USB转串口驱动芯片而是用了Wiznet公司的Ethernet接口。Arduino Ethernet的处理器核心是ATmega328，同时具有14路数字输入&#x2F;输出口，6路模拟输入，一个16MHz晶体振荡器，一个RJ45口，一个MicroSD卡座，一个电源插座，一个ICSP header和一个复位按钮。</p><h2 id="10-Arduino-Esplora"><a href="#10-Arduino-Esplora" class="headerlink" title="10.Arduino Esplora"></a>10.Arduino Esplora</h2><p>Arduino Esplora是一个Arduino Leonardo 的升级版，控制芯片依旧实用Leonardo用的Atmega32U4，所以依旧可以直接控制USB与上位机的通信，模拟PC机的键盘和鼠标等外设。新加的接口有两个TinkerKit输入和输出接口，还有彩色TFT液晶显示器的接口。Arduino Esplora最突出的特性是增加了几个内建的输入设备和传感器，还有几个输入输出接口。</p>]]></content>
    
    
    
    <tags>
      
      <tag>电脑主板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RAID简述</title>
    <link href="/github.io/2025/05/01/3.3%20RAID%E7%AE%80%E8%BF%B0/"/>
    <url>/github.io/2025/05/01/3.3%20RAID%E7%AE%80%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>RAID 是一种用于提高数据存储性能和可靠性的技术，英文全称：<code>Redundant Array of Independent Disks</code>，中文意思：独立磁盘冗余阵列。RAID 系统由两个或多个并行工作的驱动器组成，这些可以是机械硬盘或者固态硬盘。RAID 可分为软件 RAID 和硬件 RAID，在软件 RAID 中，内存架构由操作系统管理，在硬件 RAID 的情况下，磁盘内有一个专用控制器和处理器来管理内存。</p><h2 id="1-基本-RAID-级别"><a href="#1-基本-RAID-级别" class="headerlink" title="1. 基本 RAID 级别"></a>1. 基本 RAID 级别</h2><ul><li><h4 id="RAID-0"><a href="#RAID-0" class="headerlink" title="RAID 0"></a>RAID 0</h4></li></ul><p>读写速度≈单盘速度×N（N为硬盘数），但在数据安全方面，任意一盘故障，数据全毁，仅适合临时渲染缓存素材，不适合永久存储重要资料。</p><ul><li><h4 id="RAID-1"><a href="#RAID-1" class="headerlink" title="RAID 1"></a>RAID 1</h4></li></ul><p>支持单盘故障无损恢复，重建速度最快，但代价就是总硬盘容量利用率仅50%左右，两盘当一盘使用来确保数据安全。</p><ul><li><h4 id="RAID-5"><a href="#RAID-5" class="headerlink" title="RAID 5"></a>RAID 5</h4></li></ul><p>允许单盘故障，容量利用率≈(N-1)&#x2F;N，数据有冗余保障但恢复难度不低，需专用校验算法。</p><ul><li><h4 id="RAID-6"><a href="#RAID-6" class="headerlink" title="RAID 6"></a>RAID 6</h4></li></ul><p>RAID 6 使用双奇偶校验块来实现比 RAID 5 更好的数据冗余，这增加了阵列中最多两个驱动器故障的容错能力。每个磁盘都有两个奇偶校验块，它们存储在阵列中的不同磁盘上。</p><hr><h2 id="2-跨区-RAID-级别"><a href="#2-跨区-RAID-级别" class="headerlink" title="2. 跨区 RAID 级别"></a>2. 跨区 RAID 级别</h2><ul><li><h4 id="RAID-10"><a href="#RAID-10" class="headerlink" title="RAID 10"></a>RAID 10</h4></li></ul><p>相当于RAID 1+RAID 0嵌套，允许半数硬盘同时故障 <strong>，</strong>适合内容创作&#x2F;金融&#x2F;医疗等重要行业核心数据存储，不过成本高昂。需至少4盘组成。</p><ul><li><h4 id="RAID-50"><a href="#RAID-50" class="headerlink" title="RAID 50"></a>RAID 50</h4></li></ul><p>RAID 50 由两个或多个RAID 5阵列组成，形成类似RAID 0的条带化阵列。与配置相同数量的RAID 5相比，它提供了更高的访问性能和更强的数据保护性能。</p><ul><li><h4 id="RAID-60"><a href="#RAID-60" class="headerlink" title="RAID 60"></a>RAID 60</h4></li></ul><p>RAID 60有时称为 RAID 6+RAID 0，即将多个 RAID 6 集（带双奇偶校验的条带化）与 RAID 0（条带化）结合在一起。双奇偶校验允许每个 RAID 6 阵列中的两个驱动器发生故障，而条带化可提高容量和性能，而无需向每个 RAID 6 阵列添加驱动器。</p><hr><h2 id="3-RAID级别比较"><a href="#3-RAID级别比较" class="headerlink" title="3. RAID级别比较"></a>3. RAID级别比较</h2><table><thead><tr><th align="center">特征</th><th align="center">RAID 0</th><th align="center">RAID 1</th><th align="center">RAID 5</th><th align="center">RAID 6</th><th align="center">RAID 10</th><th align="center">RAID 50</th><th align="center">RAID 60</th></tr></thead><tbody><tr><td align="center">最小驱动器</td><td align="center">1个</td><td align="center">2个</td><td align="center">3个</td><td align="center">4个</td><td align="center">4个</td><td align="center">6个</td><td align="center">8个</td></tr><tr><td align="center">最大驱动器</td><td align="center">32</td><td align="center">2个</td><td align="center">32</td><td align="center">32</td><td align="center">16</td><td align="center">192</td><td align="center">192</td></tr><tr><td align="center">对硬盘故障的容忍度</td><td align="center">没有任何</td><td align="center">1 个驱动器</td><td align="center">1 个驱动器</td><td align="center">2个驱动器</td><td align="center">每个跨度 1 个驱动器</td><td align="center">每个跨度 1 个驱动器</td><td align="center">每个跨度 2 个驱动器</td></tr><tr><td align="center">重建时间</td><td align="center">没有任何</td><td align="center">快速地</td><td align="center">减缓</td><td align="center">缓慢</td><td align="center">快速地</td><td align="center">缓慢</td><td align="center">缓慢</td></tr><tr><td align="center">读写性能</td><td align="center">出色的</td><td align="center">非常好</td><td align="center">出色的</td><td align="center">出色的</td><td align="center">非常好</td><td align="center">出色的</td><td align="center">出色的</td></tr><tr><td align="center">阵列性能下降</td><td align="center">没有任何</td><td align="center">非常好</td><td align="center">满意的</td><td align="center">满意的</td><td align="center">非常好</td><td align="center">好的</td><td align="center">好的</td></tr><tr><td align="center">容量开销</td><td align="center">没有任何</td><td align="center">一半</td><td align="center">1 个驱动器</td><td align="center">2个驱动器</td><td align="center">一半</td><td align="center">每个跨度 1 个驱动器</td><td align="center">每个跨度 2 个驱动器</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>存储系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSD的物理接口与传输协议</title>
    <link href="/github.io/2025/04/23/3.2%20SSD%E7%9A%84%E7%89%A9%E7%90%86%E6%8E%A5%E5%8F%A3%E4%B8%8E%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"/>
    <url>/github.io/2025/04/23/3.2%20SSD%E7%9A%84%E7%89%A9%E7%90%86%E6%8E%A5%E5%8F%A3%E4%B8%8E%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1、物理接口：数据的“高速公路”"><a href="#1、物理接口：数据的“高速公路”" class="headerlink" title="1、物理接口：数据的“高速公路”"></a>1、物理接口：数据的“高速公路”</h2><ol><li><h4 id="SATA接口"><a href="#SATA接口" class="headerlink" title="SATA接口"></a>SATA接口</h4><p> 物理形态：7针L型连接器（2.5英寸设备）<br>协议绑定：仅支持SATA协议（AHCI指令集）<br> 带宽瓶颈：SATA 3.0理论6Gbps，机械臂寻址延迟高</p></li><li><h4 id="PCIe接口"><a href="#PCIe接口" class="headerlink" title="PCIe接口"></a>PCIe接口</h4><p>物理形态：PCIe插槽（x1&#x2F;x4&#x2F;x8通道）<br>协议自由：纯通道资源，可承载NVMe、AHCI、RAID等协议<br>带宽计算：PCIe 3.0 x4 ≈ 4GB&#x2F;s，PCIe 4.0 x4 ≈ 8GB&#x2F;s</p></li><li><h4 id="M-2接口"><a href="#M-2接口" class="headerlink" title="M.2接口"></a>M.2接口</h4><p>物理形态：M.2 Key设计（B Key&#x2F;M Key）<br>B Key（Socket 2）：支持SATA&#x2F;PCIe x2<br>M Key（Socket 3）：支持PCIe x4（NVMe）<br>核心特点：通过接口形态区分协议类型（见下图）</p></li></ol><h2 id="2、传输协议：数据的“交通规则”"><a href="#2、传输协议：数据的“交通规则”" class="headerlink" title="2、传输协议：数据的“交通规则”"></a>2、传输协议：数据的“交通规则”</h2><ol><li><h4 id="SATA协议"><a href="#SATA协议" class="headerlink" title="SATA协议"></a>SATA协议</h4><p>核心局限：基于AHCI指令集，单队列深度32，无法发挥多核CPU性能<br>Linux驱动：<code>ahci</code>模块（设备节点<code>/dev/sd*</code>）<br>典型场景：工控设备的低速日志存储（如RS485数据记录）</p></li><li><h4 id="PCIe协议"><a href="#PCIe协议" class="headerlink" title="PCIe协议"></a>PCIe协议</h4><p>本质定位：物理层和数据链路层规范（非存储专用协议）<br>存储应用：需配合上层协议（如NVMe）实现存储功能</p></li><li><h4 id="NVMe协议"><a href="#NVMe协议" class="headerlink" title="NVMe协议"></a>NVMe协议</h4><p>设计理念：为PCIe SSD定制的轻量级协议，支持64K队列深度<br>性能优势：4K随机读写性能可达SATA SSD的5倍以上<br>Linux驱动：<code>nvme</code>模块（设备节点<code>/dev/nvme*</code>）</p></li></ol><h2 id="3、PCI-E"><a href="#3、PCI-E" class="headerlink" title="3、PCI-E"></a>3、PCI-E</h2><p>PCI-Express(peripheral component interconnect express)是一种高速串行计算机扩展总线标准，是由英特尔在2001年提出的，旨在替代旧的PCI，PCI-X和AGP总线标准。</p><h4 id="（1）PCI-E-x16"><a href="#（1）PCI-E-x16" class="headerlink" title="（1）PCI-E x16"></a>（1）PCI-E x16</h4><p>插槽全长89mm，有164根针脚，主要用于显卡以及RAID阵列卡等。一般靠主板外侧端有一卡口，将16x分为前后两组，较短的插槽有22根针脚，主要用于供电，较长的插槽142根，主要用于数据传输。</p><h4 id="（2）PCI-E-x8"><a href="#（2）PCI-E-x8" class="headerlink" title="（2）PCI-E x8"></a>（2）PCI-E x8</h4><p>插槽全长56mm，有98根针脚，与PCI-E x16比较，主要是数据针脚减少至76根，短的供电针脚仍然是22针脚。</p><h4 id="（3）PCI-E-x4"><a href="#（3）PCI-E-x4" class="headerlink" title="（3）PCI-E x4"></a>（3）PCI-E x4</h4><p>插槽的长度为39mm，是在PCI-E x16插槽的基础上，以减少数据针脚的方式实现，主要用于PCI-E SSD固态硬盘，或者通过转接卡安装的M.2 SSD固态硬盘。</p><h4 id="（4）PCI-E-x1"><a href="#（4）PCI-E-x1" class="headerlink" title="（4）PCI-E x1"></a>（4）PCI-E x1</h4><p>插槽的长度是最短的，仅有25mm，相比PCI-E x16插槽，其数据针脚是大幅度减少至14个。PCI-E x1主要用途是独立网卡、独立声卡、USB 3.0&#x2F;3.1扩展卡等，是用来替代原来的PCI设备的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>存储系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32的发展史</title>
    <link href="/github.io/2025/03/30/1.4%20STM32%E7%9A%84%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    <url>/github.io/2025/03/30/1.4%20STM32%E7%9A%84%E5%8F%91%E5%B1%95%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-STM32的诞生：2007年"><a href="#1-STM32的诞生：2007年" class="headerlink" title="1. STM32的诞生：2007年"></a>1. STM32的诞生：2007年</h2><h4 id="划时代芯片：STM32F1系列"><a href="#划时代芯片：STM32F1系列" class="headerlink" title="划时代芯片：STM32F1系列"></a>划时代芯片：STM32F1系列</h4><ul><li>基于ARM Cortex-M3内核，主频72MHz，集成128KB Flash和20KB RAM，支持USB、CAN总线等外设。</li></ul><p><strong>市场意义：</strong>2007年前，单片机市场以8位机为主，STM32F1以“高性能+低成本”迅速占领中高端市场，成为工程师首选。首款性价比极高的32位MCU，打破了8位机（如8051）和传统16位机（如MSP430）的垄断，推动工业控制、医疗设备升级。</p><hr><h2 id="2-细分市场与生态构建：2009-2014年"><a href="#2-细分市场与生态构建：2009-2014年" class="headerlink" title="2. 细分市场与生态构建：2009-2014年"></a>2. 细分市场与生态构建：2009-2014年</h2><h4 id="低功耗先锋：STM32L1系列（2009）"><a href="#低功耗先锋：STM32L1系列（2009）" class="headerlink" title="低功耗先锋：STM32L1系列（2009）"></a>低功耗先锋：STM32L1系列（2009）</h4><ul><li>全球首款超低功耗MCU，采用Cortex-M3内核，休眠电流低至0.3μA，专为电池供电设备（如智能表计）设计。</li></ul><h4 id="性能跃升：STM32F4系列（2011）"><a href="#性能跃升：STM32F4系列（2011）" class="headerlink" title="性能跃升：STM32F4系列（2011）"></a>性能跃升：STM32F4系列（2011）</h4><ul><li>搭载Cortex-M4内核并集成浮点运算单元（FPU），主频达180MHz，适用于电机控制、数字信号处理。</li></ul><h4 id="生态工具：STM32CubeMX（2014）"><a href="#生态工具：STM32CubeMX（2014）" class="headerlink" title="生态工具：STM32CubeMX（2014）"></a>生态工具：STM32CubeMX（2014）</h4><ul><li>2014年ST推出STM32CubeMX，实现图形化配置与代码生成，降低开发门槛。</li></ul><p><strong>技术转折：</strong>STM32F4的FPU使得MCU首次能替代部分DSP功能，成本降低50%以上。</p><hr><h2 id="3-物联网与无线融合：2015-2020年"><a href="#3-物联网与无线融合：2015-2020年" class="headerlink" title="3. 物联网与无线融合：2015-2020年"></a>3. 物联网与无线融合：2015-2020年</h2><h4 id="无线互联：STM32WB与WL系列（2017-2020）"><a href="#无线互联：STM32WB与WL系列（2017-2020）" class="headerlink" title="无线互联：STM32WB与WL系列（2017-2020）"></a>无线互联：STM32WB与WL系列（2017-2020）</h4><ul><li>WB系列：双核架构（Cortex-M4+M0），集成蓝牙5.0和Zigbee，用于智能家居网关。</li><li>WL系列：全球首款内置LoRa的MCU，实现千米级低功耗通信，推动农业物联网普及。</li></ul><h4 id="高性能标杆：STM32H7系列（2016）"><a href="#高性能标杆：STM32H7系列（2016）" class="headerlink" title="高性能标杆：STM32H7系列（2016）"></a>高性能标杆：STM32H7系列（2016）</h4><ul><li>Cortex-M7内核+双精度FPU，主频550MHz，可运行Linux轻量级系统，应用于工业机器视觉。</li></ul><p><strong>行业影响：</strong>2020年，ST凭借STM32WL成为中国LoRa模组市场占有率第一的供应商。</p><hr><h2 id="4-AIoT与边缘计算：2020年至今"><a href="#4-AIoT与边缘计算：2020年至今" class="headerlink" title="4. AIoT与边缘计算：2020年至今"></a>4. AIoT与边缘计算：2020年至今</h2><h4 id="AI加速：STM32MP1系列（2019）"><a href="#AI加速：STM32MP1系列（2019）" class="headerlink" title="AI加速：STM32MP1系列（2019）"></a>AI加速：STM32MP1系列（2019）</h4><ul><li>异构多核设计（Cortex-A7+M4），<strong>支持Linux系统与边缘AI推理</strong>，用于智能零售终端和自动驾驶辅助系统。</li></ul><h4 id="RISC-V架构探索（2024）"><a href="#RISC-V架构探索（2024）" class="headerlink" title="RISC-V架构探索（2024）"></a>RISC-V架构探索（2024）</h4><ul><li>2024年推出实验性产品，开源指令集降低成本，助力国产化替代。</li></ul><p><strong>安全升级：</strong>集成加密引擎（如AES-256）和物理防篡改技术，满足车规级安全标准。2025年，STM32H7+NPU组合已用于无人机实时避障，处理延时从50ms降至1ms。</p><hr><h2 id="5-TM32成功的核心逻辑"><a href="#5-TM32成功的核心逻辑" class="headerlink" title="5. TM32成功的核心逻辑"></a>5. TM32成功的核心逻辑</h2><p><strong>生态闭环：</strong>从硬件（开发板）到软件（HAL库、CubeIDE），ST构建了完整的工具链，覆盖从学生到企业级开发者。</p><p><strong>产品矩阵：</strong>19个系列、超1200款型号，覆盖从0.5美元的STM32G0到30美元的STM32H7，满足全场景需求。</p><p><strong>技术前瞻：</strong>率先押注Cortex-M内核，并持续迭代工艺（180nm→40nm），功耗降低80%。</p>]]></content>
    
    
    
    <tags>
      
      <tag>芯片架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储器层次结构全景：数据存储的金字塔</title>
    <link href="/github.io/2025/03/25/3.1%20%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%85%A8%E6%99%AF/"/>
    <url>/github.io/2025/03/25/3.1%20%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%85%A8%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-寄存器：Regs"><a href="#1-寄存器：Regs" class="headerlink" title="1.寄存器：Regs"></a>1.寄存器：Regs</h2><p>寄存器是直接构建在处理器或CPU（中央处理单元）中的计算机存储类型，用于在执行指令期间存储和操作数据。寄存器可能包含一条指令、一个存储地址或任何类型的数据（例如比特序列或单个字符）。</p><p> 最常用的寄存器有指令寄存器（IR）、程序计数器（PC）、地址寄存器（AR）、数据寄存器（DR）、累加寄存器（AC）、程序状态字寄存器（PSW）。</p><h2 id="2-高速缓冲存储器：Cache"><a href="#2-高速缓冲存储器：Cache" class="headerlink" title="2.高速缓冲存储器：Cache"></a>2.高速缓冲存储器：Cache</h2><p>Cache是为了缓解内存处理数据太慢而出现的，因此Cache应该具备的一个基本特点就是读写数据的速度快，能够比较好地匹配CPU的速度，本质上是通过集成进CPU中的SRAM实现的。</p><p>时间局部性是指当CPU处理了一个数据以后它很有可能会对它进行第二次处理。<br>空间局部性是指CPU处理了内存中某一块的数据，它很可能会还对它附近的数据块进行读写操作。</p><h2 id="3-主存：RAM"><a href="#3-主存：RAM" class="headerlink" title="3. 主存：RAM"></a>3. 主存：RAM</h2><p>RAM是随机存取存储器，在断电之后它所存储的数据就会消失，但是在速度上要远远大于ROM，即使是固态硬盘也不能跟RAM比肩。</p><h4 id="（1）SRAM"><a href="#（1）SRAM" class="headerlink" title="（1）SRAM"></a>（1）SRAM</h4><p><strong>SRAM</strong>是静态RAM，CPU的L1、L2缓存说的就是SRAM，它的信息存储靠的是门电路，这些不需要电容，所以速度上更快，但是由于它存储一位信息需要的晶体管比较多，所以不能大容量集成。</p><p>说到存储器的速度，其实最快的是CPU中的寄存器，它的速度几乎和CPU是一样的。</p><h4 id="（2）DRAM"><a href="#（2）DRAM" class="headerlink" title="（2）DRAM"></a>（2）DRAM</h4><p><strong>DRAM</strong>是动态RAM，就是我们电脑上的内存条，它是靠电容存储信息的，所以需要动态刷新，以此来给电容不停的充电，所以在速度上DRAM就不如SRAM。</p><h4 id="（3）DDR"><a href="#（3）DDR" class="headerlink" title="（3）DDR"></a>（3）DDR</h4><p><strong>DDR</strong>（Double Data Rate）和<strong>LPDDR</strong>（Low Power Double Data Rate）是最常见的内存类型之一，属于易失性存储器，都采用了双倍数据传输率和同步时钟技术，以提高数据传输速度。</p><p>LPDDR内存的功耗较低，适合移动设备和嵌入式系统等需要长时间使用的场景。DDR内存则适用于计算机、服务器和其他高性能计算设备等领域。DDR内存技术已经经历了几代发展，包括DDR、DDR2、DDR3、DDR4和DDR5等，每一代的数据传输速率都有所提高。</p><h2 id="4-辅存：ROM"><a href="#4-辅存：ROM" class="headerlink" title="4. 辅存：ROM"></a>4. 辅存：ROM</h2><p>ROM的全称是只读存储器，其特性是一旦存储数据就无法再将之改变或删除，通常用在不需经常变更数据的电子或电脑系统中，并且资料不会因为电源关闭而消失。</p><h4 id="（1）MROM"><a href="#（1）MROM" class="headerlink" title="（1）MROM"></a>（1）MROM</h4><p>在计算机发展的初期，ROM（只读存储器）的功能较为单一，主要用于存储程序。作为电脑启动时运行的首个软件，早期BIOS（基本输入输出系统）仅具备基础功能，只需完成简单的硬件初始化和引导任务，无需频繁更新。</p><h4 id="（2）PROM"><a href="#（2）PROM" class="headerlink" title="（2）PROM"></a>（2）PROM</h4><p>PROM，即可编程只读存储器，对PROM写入程序后数据便无法更改。存储的每一位数据都是由熔丝状态决定的。比如当熔丝熔断之后，它代表0，没有熔断代表1。一旦某个存储单元的状态被改变就无法再恢复，这就实现了一次性编程的功能。</p><h4 id="（3）EPROM"><a href="#（3）EPROM" class="headerlink" title="（3）EPROM"></a>（3）EPROM</h4><p>EPROM，即可抹除可编程只读存储器。EPROM的存储单元基于浮栅晶体管结构，浮栅上的电荷决定了存储单元的逻辑状态，可以利用高压写入数据，擦除数据的时候需要将芯片曝光于紫外光下一段时间。</p><h4 id="（4）EEPROM"><a href="#（4）EEPROM" class="headerlink" title="（4）EEPROM"></a>（4）EEPROM</h4><p>EEPROM，是电可擦除可编程只读存储器，其擦除方式使用高压电场，所以在EEPROM芯片内部都设置有电荷泵电路来产生高压。对于一些比较简单的电子产品，它的微控制器里面就内置了EEPROM。</p><h4 id="（5）flash"><a href="#（5）flash" class="headerlink" title="（5）flash"></a>（5）flash</h4><p>后来flash出现了，也就是闪存，无论是nor flash还是nand flash其实都是属于EEPROM的，因为他们本质上是通过电来擦出和写入的。</p><ul><li><p><strong>NAND FLASH</strong>：采用了一种串行的读写方式，即以块为单位进行擦除操作，以页为单位进行编程写入。数据读取时按页进行，适合大量数据的连续读写，广泛应用于固态硬盘（SSD）、U盘、存储卡等大容量存储设备。</p><p>其中固态硬盘（SSD）存储容量可以达到数TB，更适用于需要大容量、高速存储的场景，根据闪存芯片每个cell中所能存储的数据量，分为SLC (Single-Level Cell)、  MLC (Multi-Level Cell)、TLC (Trinary-Level Cell)、QLC (Quad-Level Cell)、PLC。</p></li><li><p><strong>NOR FLASH</strong>：采用了一种并行的读写方式，即数据的读取、写入和擦除操作都可以按字节或字进行，能快速随机访问任意地址的数据，擦除通常以块为单位，但块的大小相对NAND Flash较小，常用于需要快速启动和随机访问代码的设备。</p></li></ul><h4 id="（6）eMMC和UFS"><a href="#（6）eMMC和UFS" class="headerlink" title="（6）eMMC和UFS"></a>（6）eMMC和UFS</h4><ul><li><p>半工况<strong>eMMC</strong> ( Embedded Multi Media Card)</p><p>eMMC是一种集成控制器和存储芯片的存储设备，采用了NAND Flash技术,简单地说，eMMC&#x3D;Nand Flash+控制器+标准封装。与NAND Flash不同的是，eMMC通常具有较小的存储容量，通常在几十GB或几百GB的级别。因此，eMMC适合于移动设备、嵌入式系统和一些消费电子产品等领域的应用。</p></li><li><p>全工况<strong>UFS</strong>（Universal Flash Storage）</p><p>UFS是EMMC的升级版，同样是由多个闪存芯片、主控组成的阵列式存储模块。UFS 弥补了 eMMC 仅支持半双工运行（读写必须分开执行）的缺陷，可以实现全双工运行，所以性能得到翻番,主要用于高端智能手机、平板电脑等移动设备上。</p></li></ul><h4 id="（7）eMCP和uMCP"><a href="#（7）eMCP和uMCP" class="headerlink" title="（7）eMCP和uMCP"></a>（7）eMCP和uMCP</h4><ul><li><p>eMCP&#x3D;eMMC+LPDDR</p><p><strong>eMCP</strong> 是结合 eMMC 和 LPDDR 封装而成的智慧型手机记忆体标准，与传统的 MCP 相较之下，eMCP 因为有内建的 NAND Flash 控制芯片，可以减少主芯片运算的负担，并且管理更大容量的快闪记忆体。</p></li><li><p>uMCP&#x3D;UFS+LPDDR</p><p><strong>uMCP</strong> 是结合了 UFS 和 LPDDR 封装而成的智慧型手机记忆体标准，uMCP 不仅具有高性能和大容量，同时比 P to P +分立式UFS 的解决方案减少存储芯片占用并实现了更灵活的系统设计，并实现智能手机设计的高密度、低功耗存储解决方案。</p></li></ul><h2 id="5-外存"><a href="#5-外存" class="headerlink" title="5.外存"></a>5.外存</h2><h4 id="（1）磁带"><a href="#（1）磁带" class="headerlink" title="（1）磁带"></a>（1）磁带</h4><p>Ⅰ类带是普通带，带基的材料常使用的是一种分散性良好的氧化铁粉（Fe2O3）；Ⅱ类铬带，带基一般是二氧化铬（CrO2）；Ⅲ类，铁铬带，是综合了一类（铁带）和二类（铬带）的优点而成的（Fe2O3+CrO2）；Ⅳ类 金属带，由美国3M和日本住友3M公司研制出的一种新型磁带，其涂层由超细微粒的金属合金磁粉制成，它是在二氰化铬的表面层再涂上千层特制的纯铁粉。</p><h4 id="（2）光盘"><a href="#（2）光盘" class="headerlink" title="（2）光盘"></a>（2）光盘</h4><p>光盘，即高密度光盘（Compact Disc），是近代发展起来不同于完全磁性载体的光学存储介质，用聚焦的氢离子激光束处理记录介质的方法存储和再生信息，又称激光光盘。分不可擦写光盘，如CD-ROM、DVD-ROM等；和可擦写光盘，如CD-RW、DVD-RAM等。光盘是利用激光原理进行读、写的设备，是迅速发展的一种辅助存储器。</p>]]></content>
    
    
    
    <tags>
      
      <tag>存储系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARM处理器脉络</title>
    <link href="/github.io/2025/03/23/1.3ARM%E5%A4%84%E7%90%86%E5%99%A8%E8%84%89%E7%BB%9C/"/>
    <url>/github.io/2025/03/23/1.3ARM%E5%A4%84%E7%90%86%E5%99%A8%E8%84%89%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="1-ARM处理器产品线"><a href="#1-ARM处理器产品线" class="headerlink" title="1. ARM处理器产品线"></a>1. ARM处理器产品线</h2><p>ARM处理器现在产品线主要有Cortex-A、Cortex-R、Cortex-M、SecureCore、Neoverse等</p><table><thead><tr><th></th><th align="center">定位</th><th>ARMv4</th><th>ARMv5</th><th>ARMv6</th><th>ARMv7</th><th>ARMv8</th></tr></thead><tbody><tr><td></td><td align="center"></td><td>7TDM 920T</td><td>968ES 946ES 926EJS</td><td></td><td></td><td></td></tr><tr><td><strong>Cortex-A</strong></td><td align="center">应用处理器</td><td></td><td></td><td>1136&#x2F;1176</td><td>A5&#x2F;A8&#x2F;A15</td><td>A35&#x2F;A55&#x2F;A72&#x2F;A75</td></tr><tr><td><strong>Cortex-R</strong></td><td align="center">实时处理器</td><td></td><td></td><td>1156T2</td><td>R8&#x2F;R7R5&#x2F;R4</td><td>R52</td></tr><tr><td><strong>Cortex-M</strong></td><td align="center">微控制器</td><td></td><td></td><td>M0&#x2F;M0+</td><td>M7&#x2F;M4&#x2F;M3</td><td>M33&#x2F;M23</td></tr></tbody></table><p><strong>SecureCore</strong>，基于ARM-M架构，增强了嵌入式安全，主要有SC000和SC300，分别基于Cortex-M0 (v6-M)和Cortex-M3(v7-M)。</p><p><strong>Neoverse</strong>（服务器端），面向云端到边缘的HPC、AI&#x2F;ML加速等领域，是Cortex之外的另一条面向服务器和基础设施设备的核心IP。如初代发布即收获不错市场反响的Neoverse N1核心IP，亚马逊Graviton2、Ampere Altra是基于IP设计的产品。</p><hr><h2 id="2-Cortex-A处理器发展脉络"><a href="#2-Cortex-A处理器发展脉络" class="headerlink" title="2. Cortex-A处理器发展脉络"></a>2. Cortex-A处理器发展脉络</h2><p>Cortex-A系列处理器目前主要有超低功耗核、小核、大核、超大核4个系列</p><table><thead><tr><th align="center">超低功耗</th><th align="center">超低功耗</th><th align="center">大核</th><th align="center">A8(2005)</th><th align="center">超大核</th><th align="center">小核</th><th align="center">未演进</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">A9(2007)</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center">A5(2009)</td><td align="center"></td><td align="center">A15(2010)</td><td align="center"></td><td align="center">A7(2011)</td><td align="center">A12(2013)</td></tr><tr><td align="center"></td><td align="center">A35(2015)</td><td align="center"></td><td align="center">A57(2012)</td><td align="center"></td><td align="center">A53(2015)</td><td align="center">A17(2014)</td></tr><tr><td align="center">A32(2016)</td><td align="center">A34(2019)</td><td align="center"></td><td align="center">A72(2015)</td><td align="center"></td><td align="center">A55(2017)</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">A73(2016)</td><td align="center"></td><td align="center">A510(2021)</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">A75(2017)</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">A76(2018)</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">A77(2019)</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">A78(2020)</td><td align="center"></td><td align="center">X1(2020)</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">A710(2021)</td><td align="center"></td><td align="center">X2(2021)</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">A715(2022)</td><td align="center"></td><td align="center">X3(2022)</td><td align="center"></td><td align="center"></td></tr></tbody></table><ol><li>作为<strong>超低功耗</strong>的处理器：ARMv7架构的A5和A7，ARMv8架构的A35、A32和A34；</li><li>作为<strong>小核</strong>的处理器有：ARMv7架构的A8和A9，ARMv8架构的A53和A55，以及ARMv9架构的A510；</li><li>作为<strong>大核</strong>的处理器有：ARMv7架构的A15和A17，ARMv8架构的A57、A72、A73、A75、A76、A77和A78，以及ARMv9架构的A710和A715；</li><li>作为<strong>超大核</strong>的处理器有：ARMv8架构的X1，以及ARMv9架构的X2和X3；</li></ol><table><thead><tr><th align="center">时间</th><th align="center">2005-2014</th><th align="center">2012</th><th align="center">2015</th><th align="center">2016</th><th align="center">2017</th><th align="center">2018</th><th align="center">2019</th><th align="center">2020</th><th align="center">2021</th><th align="center">2022</th></tr></thead><tbody><tr><td align="center">超大核</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">X1</td><td align="center">X2</td><td align="center">X3</td></tr><tr><td align="center">大核</td><td align="center">A15  A17</td><td align="center">A57</td><td align="center">A72</td><td align="center">A73</td><td align="center">A75</td><td align="center">A76</td><td align="center">A77</td><td align="center">A78</td><td align="center">A710</td><td align="center">A715</td></tr><tr><td align="center">小核</td><td align="center">A8  A9</td><td align="center">A53</td><td align="center"></td><td align="center"></td><td align="center">A55</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">A510</td><td align="center"></td></tr><tr><td align="center">超低功耗</td><td align="center">A5  A7</td><td align="center"></td><td align="center">A35</td><td align="center">A32</td><td align="center"></td><td align="center"></td><td align="center">A34</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>芯片架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主流芯片架构</title>
    <link href="/github.io/2025/03/15/1.2%20%E4%B8%BB%E6%B5%81%E8%8A%AF%E7%89%87%E6%9E%B6%E6%9E%84/"/>
    <url>/github.io/2025/03/15/1.2%20%E4%B8%BB%E6%B5%81%E8%8A%AF%E7%89%87%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>目前市场上主流的芯片架构有 X86、ARM、RISC-V和MIPS四种：</p><table><thead><tr><th align="center">序号</th><th align="center">架构</th><th align="center">特点</th><th align="center">代表性的厂商</th><th align="center">运营机构</th><th align="center">发明时间</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">X86</td><td align="center">性能高，速度快，兼容性好，在PC市场上独霸多年</td><td align="center">英特尔，AMD</td><td align="center">英特尔</td><td align="center">1978年</td></tr><tr><td align="center">2</td><td align="center">ARM</td><td align="center">成本低，低功耗，在移动端和便捷设备上有着不可替代的优势</td><td align="center">苹果，谷歌，IBM，华为</td><td align="center">英国ARM公司</td><td align="center">1983年</td></tr><tr><td align="center">3</td><td align="center">RISC-V</td><td align="center">模块化，极简，可拓展，在网关、机顶盒等市场上非常受欢迎</td><td align="center">三星，英伟达，西部数据</td><td align="center">RISC-V基金会</td><td align="center">2014年</td></tr><tr><td align="center">4</td><td align="center">MIPS</td><td align="center">简洁，优化方便，高拓展性，在智能穿戴产品上的应用广泛，前景广阔</td><td align="center">龙芯</td><td align="center">MIPS科技公司</td><td align="center">1981年</td></tr></tbody></table><h2 id="1、X86架构"><a href="#1、X86架构" class="headerlink" title="1、X86架构"></a>1、X86架构</h2><p>X86是微处理器执行的计算机语言指令集，指一个Intel通用计算机系列的标准编号缩写，也标识一套通用的计算机指令集合。1978年6月8日，Intel 发布了新款16位微处理器 8086，也同时开创了一个新时代：X86架构诞生了。<br>X86指令集是美国Intel公司为其第一块16位CPU（i8086）专门开发的，美国IBM公司1981年推出的世界第一台PC机中的CPU–i8088（i8086简化版）使用的也是X86指令。</p><p>随着CPU技术的不断发展，Intel陆续研制出更新型的i80386、i80486直到今天的 Pentium 4系列，但为了保证电脑能继续运行以往开发的各类应用程序以保护和继承丰富的软件资源，所以Intel公司所生产的所有CPU仍然继续使用X86指令集。</p><h2 id="2、ARM架构"><a href="#2、ARM架构" class="headerlink" title="2、ARM架构"></a>2、ARM架构</h2><p>ARM架构是一个32位精简指令集处理器架构，其广泛地使用在许多嵌入式系统设计。由于节能的特点，ARM处理器非常适用于移动通讯领域，符合其主要设计目标为低耗电的特性。</p><p>如今，ARM家族占了所有32位嵌入式处理器75%的比例，使它成为占全世界最多数的32位架构之一。ARM处理器可以在很多消费性电子产品上看到，从可携式装置到电脑外设甚至在导弹的弹载计算机等军用设施中都有它的存在。</p><h2 id="3、RISC-V架构"><a href="#3、RISC-V架构" class="headerlink" title="3、RISC-V架构"></a>3、RISC-V架构</h2><p>RISC-V 架构是基于精简指令集计算（RISC）原理建立的开放指令集架构（ISA），RISC-V是在指令集不断发展和成熟的基础上建立的全新指令。RISC-V 指令集完全开源，设计简单，易于移植Unix系统，模块化设计，完整工具链，同时有大量的开源实现和流片案例，得到很多芯片公司的认可。</p><p>RISC-V 架构的起步相对较晚，但发展很快。它可以根据具体场景选择适合指令集的指令集架构。基于RISC-V 指令集架构可以设计服务器CPU，家用电器CPU，工控CPU和用在比指头小的传感器中的CPU。</p><h2 id="4、MIPS架构"><a href="#4、MIPS架构" class="headerlink" title="4、MIPS架构"></a>4、MIPS架构</h2><p>MIPS架构是一种采取精简指令集（RISC）的处理器架构，1981年出现，由MIPS科技公司开发并授权，它是基于一种固定长度的定期编码指令集，并采用导入&#x2F;存储（Load&#x2F;Store）数据模型。经改进，这种架构可支持高级语言的优化执行。其算术和逻辑运算采用三个操作数的形式，允许编译器优化复杂的表达式。</p><p>如今基于该架构的芯片广泛被使用在许多电子产品、网络设备、个人娱乐装置与商业装置上。最早的MIPS架构是32位，最新的版本已经变成64位。</p>]]></content>
    
    
    
    <tags>
      
      <tag>芯片架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>处理器芯片的派系</title>
    <link href="/github.io/2025/02/23/1.1%20%E5%A4%84%E7%90%86%E5%99%A8%E8%8A%AF%E7%89%87%E7%9A%84%E6%B4%BE%E7%B3%BB/"/>
    <url>/github.io/2025/02/23/1.1%20%E5%A4%84%E7%90%86%E5%99%A8%E8%8A%AF%E7%89%87%E7%9A%84%E6%B4%BE%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-芯片的结构"><a href="#1-芯片的结构" class="headerlink" title="1. 芯片的结构"></a>1. 芯片的结构</h2><p>当下芯片结构简单划分就三种概念结构：冯.诺依曼结构，哈弗结构和改进哈弗结构。</p><ul><li><h4 id="冯-诺依曼结构"><a href="#冯-诺依曼结构" class="headerlink" title="冯.诺依曼结构"></a>冯.诺依曼结构</h4></li></ul><p> 客户把原始的需求文档（包含输入数据和程序）交给负责记录的人后，根据定义的沟通方式，和负责实际计算的人一起反复来回的传递文档（拿程序指令，拿数据，返结果），最后把计算结果通过记录的人反馈给客户。</p><ul><li><h4 id="哈弗结构"><a href="#哈弗结构" class="headerlink" title="哈弗结构"></a>哈弗结构</h4></li></ul><p>将程序指令和数据分开存储，采用了独立的一组程序总线和一组数据总线。这就相当于原来记录员分了个工，一个就负责记录传递计算方法（程序），一个人就负责记录传递计算内容（数据）。两个人和拨算盘的人点对点沟通，但相互之间老死不往来。</p><ul><li><h4 id="改进哈弗结构"><a href="#改进哈弗结构" class="headerlink" title="改进哈弗结构"></a>改进哈弗结构</h4></li></ul><p>保留了两个独立并行的存储器，只有一组总线供程序存储器和数据存储器分时共用。这就相当于记录员还是为了效率做了分工，但沟通方式升级，把客户和拨算盘的人也加入进来做了个四方沟通会（分时公用）。</p><hr><h2 id="2-芯片的派系"><a href="#2-芯片的派系" class="headerlink" title="2. 芯片的派系"></a>2. 芯片的派系</h2><h4 id="（1）通用芯片"><a href="#（1）通用芯片" class="headerlink" title="（1）通用芯片"></a>（1）通用芯片</h4><p>通用芯片，这意味着其必须具备处理各式各样千奇百怪的指令要求，并且经常同时存在多个外部设备的请求，它必须拥有随时中止目前的运算转而进行其他运算，完成后再从中断点继续当前运算的能力。</p><ul><li><h5 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h5></li></ul><p>CPU虽然有多核，但基本不超过两位数，每个核都有足够大的缓存和足够多的数字和逻辑运算单元，并有更复杂的逻辑判断硬件，就像银行里常备的3-4个柜台的柜员，擅长处理客户很复杂的业务。</p><ul><li><h5 id="MPU"><a href="#MPU" class="headerlink" title="MPU"></a>MPU</h5></li></ul><p>MPU和CPU可以简单理解为一个概念，只是理解范畴上的区别。</p><ul><li><h5 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h5></li></ul><p>GPU的核数远超CPU，每个核拥有的缓存大小相对小，数字逻辑运算单元也少而简单，更像是500多个电话客服柜员，处理一些相对简单但数量众多的客户业务。</p><ul><li><h5 id="DSP"><a href="#DSP" class="headerlink" title="DSP"></a>DSP</h5></li></ul><p>DSP（数字信号处理芯片）是一类特殊的CPU，采用哈佛结构，且存在专用的硬件算法电路和专门的寻址模式。它具有通用芯片设计的灵活性，但在实时运算过程中很少变化，因此特化了业务流程的性能（记录和计算过程）。</p><h4 id="（2）定制芯片"><a href="#（2）定制芯片" class="headerlink" title="（2）定制芯片"></a>（2）定制芯片</h4><p>相比通用芯片，定制芯片是没有“人性”的，就是一个ATM机，其给客户定义了清晰的操作流程，省去了中断等大量灵活性设计。FPGA和ASIC两者核心的区别就是固化程度，区别最大的维度还是成本和功耗。</p><ul><li><h5 id="FPGA"><a href="#FPGA" class="headerlink" title="FPGA"></a>FPGA</h5></li></ul><p>FPGA最早是从专用集成电路发展而来的半定制化的可编程电路，是高端的CPLD (Complex Programmable Logic Device复杂可编程逻辑器件)。FPGA是一堆逻辑门，通过硬件描述语言HDL把它转成电路连接，从最基本的逻辑门层面上连接成电路。</p><ul><li><h5 id="ASIC"><a href="#ASIC" class="headerlink" title="ASIC"></a>ASIC</h5></li></ul><p>ASIC就是专用IC，ASIC原本就是专门为某一项功能开发的专用集成芯片。后来ASIC发展了一些，称为半定制专用集成电路，其代表了在需求一定的情况下，对性价比的极致追求。</p><h4 id="（3）芯片之上的集成"><a href="#（3）芯片之上的集成" class="headerlink" title="（3）芯片之上的集成"></a>（3）芯片之上的集成</h4><ul><li><h5 id="MCU"><a href="#MCU" class="headerlink" title="MCU"></a>MCU</h5></li></ul><p>MCU本身不是一种芯片类型而是一种集成方式，单片机是MCU的通俗说法，经典的51系列就是一堆IO口，后来慢慢的把常用的PWM, AD之类的功能加入了单片机之中。其构成等价于一个带了更多外设CPU，但侧重点是讨论其外设的部分。</p><ul><li><h5 id="ECU"><a href="#ECU" class="headerlink" title="ECU"></a>ECU</h5></li></ul><p>在PWM,AD等之上继续发展其外设也就形成了汽车行业熟悉的ECU（即电子控制单元），同时泛指汽车上所有电子控制系统，可以是转向ECU，空调ECU等。ECU一般由MCU，扩展内存，扩展输入和输出（CAN&#x2F;LIN，AD,PWM等）。</p><ul><li><h5 id="SOC"><a href="#SOC" class="headerlink" title="SOC"></a>SOC</h5></li></ul><p>SOC芯片是ECU的概念进一步升级，更为流行的说法是域控制器，其无外乎就是把MCU变成了SoC（片上系统），同时集成了更多的外围设备而已。在SoC中各种组件（IP核）采用类似搭积木的方法组合在一起，做成不同的SoC芯片。</p><hr><h2 id="3-软硬件的匹配设计"><a href="#3-软硬件的匹配设计" class="headerlink" title="3. 软硬件的匹配设计"></a>3. 软硬件的匹配设计</h2><p>算法的性能与硬件设计往往脱离不开，软硬件一起考虑往往才能充分利用好系统性能。不同的芯片，不同的算法和需求，往往有最优的组合方式。</p>]]></content>
    
    
    
    <tags>
      
      <tag>芯片架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派版本变迁与差异</title>
    <link href="/github.io/2025/02/13/2.2%20%E6%A0%91%E8%8E%93%E6%B4%BE%E7%89%88%E6%9C%AC%E5%8F%98%E8%BF%81%E4%B8%8E%E5%B7%AE%E5%BC%82/"/>
    <url>/github.io/2025/02/13/2.2%20%E6%A0%91%E8%8E%93%E6%B4%BE%E7%89%88%E6%9C%AC%E5%8F%98%E8%BF%81%E4%B8%8E%E5%B7%AE%E5%BC%82/</url>
    
    <content type="html"><![CDATA[<p>树莓派（Raspberry Pi）是一款广受欢迎的单板计算机，由英国的Raspberry Pi基金会开发。它的初衷是为了促进计算机科学教育，但由于其强大的功能和低廉的价格，迅速在全球范围内得到了广泛应用。</p><hr><table><thead><tr><th>型号</th><th align="center">芯片</th><th align="center">CPU</th><th align="center">频率</th><th align="center">内存</th><th align="center">发布时间</th></tr></thead><tbody><tr><td>树莓派A型（未发售）</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">256MB</td><td align="center">未发售</td></tr><tr><td>树莓派B型（第一代）</td><td align="center">Broadcom BCM2835</td><td align="center">ARM1176JZF-S</td><td align="center">700 MHz</td><td align="center">512MB</td><td align="center">2012年9月</td></tr><tr><td>树莓派B+型（第一代改进版）</td><td align="center">Broadcom BCM2835</td><td align="center">ARM1176JZF-S</td><td align="center">700 MHz</td><td align="center">512MB</td><td align="center">2014年7月</td></tr><tr><td>树莓派A+型（第一代低规格版）</td><td align="center">Broadcom BCM2835</td><td align="center">ARM1176JZF-S</td><td align="center">700 MHz</td><td align="center">256MB（后增至512MB）</td><td align="center">2014年11月</td></tr><tr><td>树莓派2B型（第二代）</td><td align="center">Broadcom BCM2836&#x2F;7</td><td align="center">四核ARM Cortex-A7</td><td align="center">900 MHz</td><td align="center">1GB</td><td align="center">2015年2月</td></tr><tr><td>树莓派Zero</td><td align="center">Broadcom BCM2835</td><td align="center">ARM11</td><td align="center">1 GHz</td><td align="center">512MB</td><td align="center">2015年11月</td></tr><tr><td>树莓派3B型（第三代）</td><td align="center">Broadcom BCM2837</td><td align="center">四核ARM Cortex-A53</td><td align="center">1.2 GHz</td><td align="center">1GB、2GB、4GB可选</td><td align="center">2016年2月</td></tr><tr><td>树莓派Zero W</td><td align="center">Broadcom BCM2835</td><td align="center">ARM11</td><td align="center">1 GHz</td><td align="center">512MB</td><td align="center">2017年2月</td></tr><tr><td>树莓派3B+型（第三代改进版）</td><td align="center">Broadcom BCM2837B0</td><td align="center">四核ARM Cortex-A53</td><td align="center">1.4 GHz</td><td align="center">1GB、2GB、4GB可选</td><td align="center">2018年3月</td></tr><tr><td>树莓派3A+型（第三代低规格版）</td><td align="center">Broadcom BCM2837B0</td><td align="center">四核ARM Cortex-A53</td><td align="center">1.4 GHz</td><td align="center">512MB</td><td align="center">2018年11月</td></tr><tr><td>树莓派4B型（第四代）</td><td align="center">Broadcom BCM2711</td><td align="center">四核ARM Cortex-A72</td><td align="center">1.5 GHz</td><td align="center">1GB、2GB、4GB、8GB可选</td><td align="center">2019年6月</td></tr><tr><td>树莓派400（第四代一体机）</td><td align="center">Broadcom BCM2711</td><td align="center">四核ARM Cortex-A72</td><td align="center">1.8 GHz</td><td align="center">4GB</td><td align="center">2020年11月</td></tr><tr><td>树莓派Pico</td><td align="center">Raspberry Pi RP2040</td><td align="center">双核ARM Cortex-M0+</td><td align="center">133 MHz</td><td align="center">264KB SRAM</td><td align="center">2021年1月</td></tr><tr><td>树莓派5（第五代）</td><td align="center">Broadcom BCM2712</td><td align="center">四核ARM Cortex-A76</td><td align="center">2.4 GHz</td><td align="center">4GB、8GB可选</td><td align="center">2023年9月</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>电脑主板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wi-Fi 标准和类型变迁</title>
    <link href="/github.io/2025/02/11/4.1%20Wi-Fi%20%E6%A0%87%E5%87%86%E5%92%8C%E7%B1%BB%E5%9E%8B%E5%8F%98%E8%BF%81/"/>
    <url>/github.io/2025/02/11/4.1%20Wi-Fi%20%E6%A0%87%E5%87%86%E5%92%8C%E7%B1%BB%E5%9E%8B%E5%8F%98%E8%BF%81/</url>
    
    <content type="html"><![CDATA[<p>Wi-Fi，在中文里又称作“移动热点”，是Wi-Fi联盟制造商的商标作为产品的品牌认证，是基于IEEE 802.11标准的无线局域网通信技术 。</p><table><thead><tr><th align="center">IEEE标准</th><th align="center">WI-FI版本</th><th align="center">频段</th><th align="center">最大数据速率</th><th align="center">PHY技术</th><th align="center">调制方式</th><th align="center">空间流数</th><th align="center">信道带宽</th><th align="center">发布时间</th></tr></thead><tbody><tr><td align="center">IEEE 802.11-1997</td><td align="center">WiFi 0</td><td align="center">2.4GHz</td><td align="center">2Mbps</td><td align="center">DSSS</td><td align="center">BPSK, QPSK</td><td align="center">1</td><td align="center">20MHz</td><td align="center">1997年</td></tr><tr><td align="center">IEEE 802.11b</td><td align="center">WiFi 1</td><td align="center">2.4GHz</td><td align="center">11Mbps</td><td align="center">DSSS</td><td align="center">QPSK, CCK</td><td align="center">1</td><td align="center">20MHz</td><td align="center">1999年</td></tr><tr><td align="center">IEEE 802.11a</td><td align="center">WiFi 2</td><td align="center">5GHz</td><td align="center">54Mbps</td><td align="center">OFDM</td><td align="center">BPSK, QPSK, 16-QAM</td><td align="center">1</td><td align="center">20MHz</td><td align="center">1999年</td></tr><tr><td align="center">IEEE 802.11g</td><td align="center">WiFi 3</td><td align="center">2.4GHz</td><td align="center">54Mbps</td><td align="center">OFDM</td><td align="center">BPSK, QPSK, CCK, 16-QAM</td><td align="center">1</td><td align="center">20MHz</td><td align="center">2003年</td></tr><tr><td align="center">IEEE 802.11n</td><td align="center">WiFi 4</td><td align="center">2.4GHz、5GHz</td><td align="center">600Mbps</td><td align="center">MIMO-OFDM</td><td align="center">BPSK, QPSK, 16-QAM</td><td align="center">1-4</td><td align="center">20MHz、40MHz</td><td align="center">2009年</td></tr><tr><td align="center">IEEE 802.11ac</td><td align="center">WiFi 5</td><td align="center">5GHz</td><td align="center">3.47Gbps</td><td align="center">MIMO-OFDM</td><td align="center">BPSK, QPSK, 16-QAM</td><td align="center">1-8</td><td align="center">20MHz、40MHz、80MHz、160MHz</td><td align="center">2013年</td></tr><tr><td align="center">IEEE 802.11ax</td><td align="center">WiFi 6</td><td align="center">2.4GHz、5GHz</td><td align="center">9.6Gbps</td><td align="center">OFDMA, MU-MIMO</td><td align="center">BPSK, QPSK, 16-QAM</td><td align="center">1-8</td><td align="center">20MHz、40MHz、80MHz、160MHz</td><td align="center">2019年</td></tr><tr><td align="center">IEEE 802.11ax -2021</td><td align="center">WiFi 6E扩展</td><td align="center">6GHz</td><td align="center">同上</td><td align="center">同上</td><td align="center">同上</td><td align="center">同上</td><td align="center">同上</td><td align="center">2021年</td></tr><tr><td align="center">IEEE 802.11be</td><td align="center">WiFi 7</td><td align="center">2.4GHz、5GHz、6GHz</td><td align="center">46Gbps</td><td align="center">OFDMA, MU-MIMO</td><td align="center">4096-QAM</td><td align="center">1-8</td><td align="center">20MHz、40MHz、80MHz、160MHz、320MHz</td><td align="center">2024年</td></tr></tbody></table><p>注：<strong>WLAN</strong>的全称是Wireless Local Area Network，中文含义是无线局域网。WLAN广义上讲是以各种无线电波（如激光、红外线等）的无线信道来代替有线局域网中的部分或全部传输介质所构成的网络。在WLAN的演进和发展过程中，其实现技术标准有很多，如蓝牙、Wi-Fi、HyperLAN2等。简单来说就是，WLAN是一个网络系统，而Wi-Fi是这个网络系统中的一种技术。</p>]]></content>
    
    
    
    <tags>
      
      <tag>无线通讯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑主板尺寸分类</title>
    <link href="/github.io/2025/02/10/2.1%20%E7%94%B5%E8%84%91%E4%B8%BB%E6%9D%BF%E5%B0%BA%E5%AF%B8%E5%88%86%E7%B1%BB/"/>
    <url>/github.io/2025/02/10/2.1%20%E7%94%B5%E8%84%91%E4%B8%BB%E6%9D%BF%E5%B0%BA%E5%AF%B8%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>在市场上有许多类型的主板，包括ATX、MicroATX、Mini-ITX、服务器主板、工作站主板、嵌入式主板等。它们在尺寸、扩展插槽、性能、功能等方面存在着区别。不同类型的主板在尺寸、扩展插槽、性能、功能等方面存在着不同的区别，以满足不同用户的需求。</p><h2 id="1-早期主板"><a href="#1-早期主板" class="headerlink" title="1. 早期主板"></a>1. 早期主板</h2><table><thead><tr><th align="center">版型</th><th align="center">尺寸</th><th align="center">接口</th><th align="center">时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">AT</td><td align="center">305mm*279-330mm</td><td align="center">集成控制芯片和8个I&#x2F;O扩充插槽</td><td align="center">1984年</td><td align="center">用于ISA总线类型的扩展卡</td></tr><tr><td align="center">Baby-AT</td><td align="center">220mm*330mm</td><td align="center"></td><td align="center">1985年</td><td align="center"></td></tr><tr><td align="center">L</td><td align="center">13 英寸 x 9 英寸</td><td align="center"></td><td align="center">1987年</td><td align="center"></td></tr><tr><td align="center">NLX</td><td align="center"></td><td align="center"></td><td align="center">1997年</td><td align="center"></td></tr></tbody></table><h2 id="2-超大板E-ATX型"><a href="#2-超大板E-ATX型" class="headerlink" title="2. 超大板E-ATX型"></a>2. 超大板E-ATX型</h2><p>高性能主板，芯片组都是X字母开头，适合使用带X后缀的处理器，但是价格很高，不推荐普通用户使用。</p><table><thead><tr><th align="center">版型</th><th align="center">尺寸</th><th align="center">接口</th><th align="center">时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">WTX</td><td align="center">356mm*425mm</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">HPTX</td><td align="center">354mm*381mm</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">EE-ATX</td><td align="center">347mm*330mm</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">E-ATX</td><td align="center">305mm*330mm（12英寸×13英寸）</td><td align="center">4-8个 PCI-E x16*</td><td align="center">2020年</td><td align="center">主要用于高性能PC整机、入门式工作站等领域</td></tr></tbody></table><h2 id="3-大板-ATX型"><a href="#3-大板-ATX型" class="headerlink" title="3. 大板 ATX型"></a>3. 大板 ATX型</h2><p>大板，扩展性好，接口全，一般内存都是四插槽起，2或3个PCIe接口和M.2接口。</p><table><thead><tr><th align="center">版型</th><th align="center">尺寸</th><th align="center">接口</th><th align="center">时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">XL-ATX</td><td align="center">343mm*262mm</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ATX</td><td align="center">305mm*244mm（12英寸×9.6英寸）</td><td align="center">扩展插槽数量丰富，包括3-4 个 PCI-E x16和1个 PCI-E x1、PCI插槽、RAM插槽和SATA接口等</td><td align="center">1995年</td><td align="center">较高的功耗</td></tr><tr><td align="center">BTX</td><td align="center">325mm×266mm</td><td align="center"></td><td align="center">2005年</td><td align="center"></td></tr><tr><td align="center">Mini-ATX</td><td align="center">284mm*208mm</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="4-小板-MATX型"><a href="#4-小板-MATX型" class="headerlink" title="4. 小板 MATX型"></a>4. 小板 MATX型</h2><p>小板，主流的主板版型，内存插槽一般是两个或者四个，会有一个M.2接口，扩展性虽然不高，但是绝对可以满足大多数用户的需求。</p><table><thead><tr><th align="center">版型</th><th align="center">尺寸</th><th align="center">接口</th><th align="center">时间</th><th>备注</th></tr></thead><tbody><tr><td align="center">Micro-BTX</td><td align="center">264mm×267mm</td><td align="center"></td><td align="center">2005年</td><td></td></tr><tr><td align="center">Micro-ATX</td><td align="center">244mm*244mm（9.6英寸×9.6英寸）</td><td align="center">扩展插槽数量少，2 个 PCI-E x16和1个 PCI-E x1</td><td align="center"></td><td>兼容ATX的接口</td></tr><tr><td align="center">uATX</td><td align="center">244mm*185mm</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">FlexATX</td><td align="center">229mm*191mm</td><td align="center"></td><td align="center"></td><td></td></tr></tbody></table><h2 id="5-迷你板-ITX型"><a href="#5-迷你板-ITX型" class="headerlink" title="5. 迷你板 ITX型"></a>5. 迷你板 ITX型</h2><p>迷你主板，接口数量属于刚好够用，适合ITX迷你机箱，一般用来办公或者家用，不适合做游戏主机。</p><table><thead><tr><th align="center">版型</th><th align="center">尺寸</th><th align="center">接口</th><th align="center">时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">ITX</td><td align="center">170mm*170mm（6.7英寸×6.7英寸）</td><td align="center">1个PCI-E x16和1个 mini PCI-E</td><td align="center"></td><td align="center">电源要用SFX规格甚1U电源</td></tr><tr><td align="center">Nano-ITX</td><td align="center"></td><td align="center"></td><td align="center">2003年</td><td align="center"></td></tr><tr><td align="center">Pico-ITX</td><td align="center"></td><td align="center"></td><td align="center">2007年</td><td align="center"></td></tr><tr><td align="center">Thin-ITX</td><td align="center">170mm*170mm（缩减厚度）</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Mini-SFX</td><td align="center">147mm x 140mm</td><td align="center"></td><td align="center">2015年</td><td align="center"></td></tr></tbody></table><h2 id="6-卡片电脑"><a href="#6-卡片电脑" class="headerlink" title="6.卡片电脑"></a>6.卡片电脑</h2><p>RAM：树莓派（Raspberry Pi）、香橙派orange pi、nano pi、香蕉派banana pi、英伟达Jetson TX2和Jetson Nano、飞思卡尔i.MX6系列和i.MX8系列、高通（Qualcomm）</p><p>X86：英特尔（Intel）N100、N5105</p><p>RISC-V：HiFive Unmatched、赛昉科技VisionFive 2、平头哥BeagleV-Ahead、全志科技哪吒开发板（D1-H ）</p><p>LoongArch（MIPS）：龙芯（Loongson）2K0300</p>]]></content>
    
    
    
    <tags>
      
      <tag>电脑主板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>耕海纪</title>
    <link href="/github.io/2023/04/01/0.%20%E8%80%95%E6%B5%B7%E7%BA%AA/"/>
    <url>/github.io/2023/04/01/0.%20%E8%80%95%E6%B5%B7%E7%BA%AA/</url>
    
    <content type="html"><![CDATA[<p>按照惯例，hello，world！</p><p>本站没有主题，博主随性而为，所以没有期待、没有纠结、随时断更。</p><p>关于博客名字“耕海纪”：其中耕取自“耕读传家久，诗书继世长”之意，耕作劳动是自古以来中国人日常生活的重要内容，是我们祖祖辈辈赖以生存的方式，老一辈人面朝黄土背朝天，农耕之苦与新时代我辈之苦通之。海，天池也。以纳百川者。浩瀚无际的海洋往往象征着无限、未知、深不可测。 海洋的巨大深度和不断变化的性质反映着宇宙的浩瀚和地表之下的奥秘，海洋赋予生命的特性使其与出生、重生和生命本身的原始本质的主题相一致。</p><p>所以，说到这里啦！</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs text">/<br>├── 随笔/<br>    ├── 致谢青春，再见海大/20230401<br>    <br>├── 芯片架构/<br>├── 处理器芯片的派系/20250223<br>├── 主流芯片架构/20250315<br>├── RAM处理器的脉络/20250323<br>├── STM32的发展史/20250330<br>├── RISC-V处理器的脉络/20250610<br><br>├── 电脑主板/<br>├── 电脑主板尺寸分类/20250210<br>├── 树莓派版本变迁与差异/20250213<br>├── Arduino开发板的版本类型/20250514<br><br>├── 存储系统/<br>├── 存储系统的分类/20250325<br>├── SSD的物理接口与传输协议/20250423<br>    ├── RAID简述/20250431<br>    <br>├── 无线通讯/<br>├── Wi-Fi标准和类型变迁/20250211<br>├── 蓝牙标准和类型变迁/20250625<br>├── 蜂窝网络标准和类型变迁/20250715<br><br>├── ……/<br>├── ……/<br>├── ……/<br>├── ……/<br>└── end/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
